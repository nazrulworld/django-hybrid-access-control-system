# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2016-11-17 07:05
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import hacs.fields
import hacs.models
import hacs.validators
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('sites', '0002_alter_domain_unique'),
    ]

    operations = [
        migrations.CreateModel(
            name='HacsUserModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(blank=True, max_length=127, null=True)),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
            ],
            options={
                'swappable': 'AUTH_USER_MODEL',
                'db_table': 'hacs_users',
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', hacs.models.HacsUserManger()),
            ],
        ),
        migrations.CreateModel(
            name='ContentTypeRoutingRules',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('allowed_method', hacs.fields.SequenceField(blank=True, null=True, verbose_name='Allowed Method')),
                ('blacklisted_uri', models.CharField(blank=True, help_text='regex formatted uri those will be treated as blacklisted and request will be discarded by firewall', max_length=255, null=True, verbose_name='blacklisted uri')),
                ('whitelisted_uri', models.CharField(blank=True, help_text='regex formatted uri those will be treated as whitelisted and request will be discarded by firewall if uri not match', max_length=255, null=True, verbose_name='whitelisted uri')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_on', models.DateTimeField(blank=True, default=django.utils.timezone.now, verbose_name='Created On')),
                ('updated_on', models.DateTimeField(blank=True, null=True, verbose_name='Last updated')),
            ],
            options={
                'db_table': 'hacs_ct_routing_rules',
                'verbose_name': 'content type routing rules',
                'verbose_name_plural': 'content types routing rules',
            },
            managers=[
                ('objects', hacs.models.ContentTypeRoutingRulesManager()),
            ],
        ),
        migrations.CreateModel(
            name='HacsContentType',
            fields=[
                ('content_type', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='contenttypes.ContentType')),
                ('globally_allowed', models.BooleanField()),
                ('permissions_actions_map', hacs.fields.DictField(null=True)),
                ('allowed_content_types', models.ManyToManyField(blank=True, db_constraint=False, related_name='hacs_ctr_hctype_ctypes', related_query_name='hacs_ctr_hctype_ctypes_set', to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='HacsGroupModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=127, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'hacs_groups',
                'verbose_name': 'group',
                'verbose_name_plural': 'groups',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('hacs_base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='HacsPermissionModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=127, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'hacs_permissions',
                'verbose_name': 'permission',
                'verbose_name_plural': 'permissions',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('hacs_base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='HacsRoleModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=127, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('parent', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hacs_rlm_role_children', related_query_name='hacs_rlm_role_children_set', to='hacs.HacsRoleModel')),
            ],
            options={
                'db_table': 'hacs_roles',
                'verbose_name': 'role',
                'verbose_name_plural': 'roles',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('hacs_base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='HacsWorkflowModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=127)),
                ('slug', models.SlugField(blank=True, max_length=127, null=True, unique=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(blank=True, null=True)),
                ('permissions', hacs.fields.SequenceField(blank=True, null=True)),
                ('permissions_map', hacs.fields.DictField(blank=True, null=True)),
                ('states', hacs.fields.SequenceField(blank=True, null=True)),
                ('states_permissions_map', hacs.fields.DictField(blank=True, null=True)),
                ('transitions', hacs.fields.DictField(blank=True, null=True)),
                ('created_by', hacs.fields.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='hacs_usm_HacsWorkflowModel_creators', related_query_name='hacs_usm_HacsWorkflowModel_creators_set', to=settings.AUTH_USER_MODEL)),
                ('modified_by', hacs.fields.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='hacs_usm_HacsWorkflowModel_modifiers', related_query_name='hacs_usm_HacsWorkflowModel_modifiers_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'hacs_workflows',
                'verbose_name': 'workflow',
                'verbose_name_plural': 'workflows',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('hacs_base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='RoutingTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('route_name', models.SlugField(max_length=127, unique=True, verbose_name='route name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('urls', hacs.fields.SequenceField(validators=[hacs.validators.UrlModulesValidator()], verbose_name='URLs')),
                ('handlers', hacs.fields.DictField(blank=True, default='', null=True, validators=[hacs.validators.HttpHandlerValidator()], verbose_name='Handlers')),
                ('generated_module', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Generated Module')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Soft Delete')),
                ('created_on', models.DateTimeField(blank=True, default=django.utils.timezone.now, verbose_name='Created On')),
                ('updated_on', models.DateTimeField(blank=True, null=True, verbose_name='Last updated')),
            ],
            options={
                'db_table': 'hacs_routing_table',
                'verbose_name': 'routing table',
                'verbose_name_plural': 'routes table',
            },
            managers=[
                ('objects', hacs.models.RoutingTableManager()),
            ],
        ),
        migrations.CreateModel(
            name='SiteRoutingRules',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allowed_method', hacs.fields.SequenceField(blank=True, null=True, verbose_name='Allowed Method')),
                ('blacklisted_uri', models.CharField(blank=True, help_text='regex formatted uri those will be treated as blacklisted and request will be discarded by firewall', max_length=255, null=True, verbose_name='blacklisted uri')),
                ('whitelisted_uri', models.CharField(blank=True, help_text='regex formatted uri those will be treated as whitelisted and request will be discarded by firewall if uri not match', max_length=255, null=True)),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('maintenance_mode', models.BooleanField(default=False, help_text='Firewall will only response maintenance view and prevent any further execution for all request if it is on', verbose_name='Maintenance Mode')),
                ('created_on', models.DateTimeField(blank=True, default=django.utils.timezone.now, verbose_name='Created On')),
                ('updated_on', models.DateTimeField(blank=True, null=True, verbose_name='Last updated')),
                ('route', models.ForeignKey(db_column='route_id', db_constraint=False, on_delete=django.db.models.deletion.CASCADE, related_name='hacs_route_sites', to='hacs.RoutingTable')),
                ('site', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='hacs_site_routes', to='sites.Site')),
            ],
            options={
                'db_table': 'hacs_sites_routing_rules',
                'verbose_name': 'site routing rules',
                'verbose_name_plural': 'sites routing rules',
            },
            managers=[
                ('objects', hacs.models.SiteRoutingRulesManager()),
            ],
        ),
        migrations.AddField(
            model_name='hacspermissionmodel',
            name='roles',
            field=models.ManyToManyField(db_constraint=False, related_name='hacs_rlm_role_permissions', related_query_name='hacs_rlm_role_permissions_set', to='hacs.HacsRoleModel'),
        ),
        migrations.AddField(
            model_name='hacsgroupmodel',
            name='roles',
            field=models.ManyToManyField(db_constraint=False, related_name='hacs_grp_role_groups', related_query_name='hacs_grp_role_groups_set', to='hacs.HacsRoleModel'),
        ),
        migrations.AddField(
            model_name='hacscontenttype',
            name='workflow',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='hacs_wfl_HacsContentType_ctypes', related_query_name='hacs_wfl_HacsContentType_ctypes_set', to='hacs.HacsWorkflowModel'),
        ),
        migrations.AddField(
            model_name='contenttyperoutingrules',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', validators=[hacs.validators.ContentTypeValidator()]),
        ),
        migrations.AddField(
            model_name='contenttyperoutingrules',
            name='route',
            field=models.ForeignKey(db_column='route_id', db_constraint=False, on_delete=django.db.models.deletion.CASCADE, related_name='hacs_route_contenttypes', to='hacs.RoutingTable'),
        ),
        migrations.AddField(
            model_name='contenttyperoutingrules',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hacs_site_contenttypes_at_routing_rules', to='sites.Site'),
        ),
        migrations.AddField(
            model_name='hacsusermodel',
            name='groups',
            field=models.ManyToManyField(blank=True, db_constraint=False, related_name='hacs_rlm_group_users', related_query_name='hacs_rlm_group_users_set', to='hacs.HacsGroupModel'),
        ),
        migrations.AddField(
            model_name='hacsusermodel',
            name='roles',
            field=models.ManyToManyField(blank=True, db_constraint=False, related_name='hacs_rlm_role_users', related_query_name='hacs_rlm_role_users_set', to='hacs.HacsRoleModel'),
        ),
        migrations.AlterUniqueTogether(
            name='contenttyperoutingrules',
            unique_together=set([('site', 'content_type', 'object_id')]),
        ),
    ]
